func (*InputField) SetAutocompleteFunc ¶

func (i *InputField) SetAutocompleteFunc(callback func(currentText string) (entries []string)) *InputField

SetAutocompleteFunc sets an autocomplete callback function which may return strings to be selected from a drop-down based on the current text of the input field. The drop-down appears only if len(entries) > 0. The callback is invoked in this function and whenever the current text changes or when InputField.Autocomplete is called. Entries are cleared when the user selects an entry or presses Escape.
func (*InputField) SetAutocompleteStyles ¶

func (i *InputField) SetAutocompleteStyles(background tcell.Color, main, selected tcell.Style) *InputField

SetAutocompleteStyles sets the colors and style of the autocomplete entries. For details, see List.SetMainTextStyle(), List.SetSelectedStyle(), and Box.SetBackgroundColor().
func (*InputField) SetAutocompletedFunc ¶

func (i *InputField) SetAutocompletedFunc(autocompleted func(text string, index int, source int) bool) *InputField

SetAutocompletedFunc sets a callback function which is invoked when the user selects an entry from the autocomplete drop-down list. The function is passed the text of the selected entry (stripped of any style tags), the index of the entry, and the user action that caused the selection, for example AutocompletedNavigate. It returns true if the autocomplete drop-down should be closed after the callback returns or false if it should remain open, in which case InputField.Autocomplete is called to update the drop-down's contents.

If no such callback is set (or nil is provided), the input field will be updated with the selection any time the user navigates the autocomplete drop-down list. So this function essentially gives you more control over the autocomplete functionality.
func (*InputField) SetChangedFunc ¶

func (i *InputField) SetChangedFunc(handler func(text string)) *InputField

SetChangedFunc sets a handler which is called whenever the text of the input field has changed. It receives the current text (after the change).
func (*InputField) SetDisabled ¶

func (i *InputField) SetDisabled(disabled bool) FormItem

SetDisabled sets whether or not the item is disabled / read-only.
func (*InputField) SetDoneFunc ¶

func (i *InputField) SetDoneFunc(handler func(key tcell.Key)) *InputField

SetDoneFunc sets a handler which is called when the user is done entering text. The callback function is provided with the key that was pressed, which is one of the following:

    KeyEnter: Done entering text.
    KeyEscape: Abort text input.
    KeyTab: Move to the next field.
    KeyBacktab: Move to the previous field.

func (*InputField) SetFieldBackgroundColor ¶

func (i *InputField) SetFieldBackgroundColor(color tcell.Color) *InputField

SetFieldBackgroundColor sets the background color of the input area.
func (*InputField) SetFieldStyle ¶

func (i *InputField) SetFieldStyle(style tcell.Style) *InputField

SetFieldStyle sets the style of the input area (when no placeholder is shown).
func (*InputField) SetFieldTextColor ¶

func (i *InputField) SetFieldTextColor(color tcell.Color) *InputField

SetFieldTextColor sets the text color of the input area.
func (*InputField) SetFieldWidth ¶

func (i *InputField) SetFieldWidth(width int) *InputField

SetFieldWidth sets the screen width of the input area. A value of 0 means extend as much as possible.
func (*InputField) SetFinishedFunc ¶

func (i *InputField) SetFinishedFunc(handler func(key tcell.Key)) FormItem

SetFinishedFunc sets a callback invoked when the user leaves this form item.
func (*InputField) SetFormAttributes ¶

func (i *InputField) SetFormAttributes(labelWidth int, labelColor, bgColor, fieldTextColor, fieldBgColor tcell.Color) FormItem

SetFormAttributes sets attributes shared by all form items.
func (*InputField) SetLabel ¶

func (i *InputField) SetLabel(label string) *InputField

SetLabel sets the text to be displayed before the input area.
func (*InputField) SetLabelColor ¶

func (i *InputField) SetLabelColor(color tcell.Color) *InputField

SetLabelColor sets the text color of the label.
func (*InputField) SetLabelStyle ¶

func (i *InputField) SetLabelStyle(style tcell.Style) *InputField

SetLabelStyle sets the style of the label.
func (*InputField) SetLabelWidth ¶

func (i *InputField) SetLabelWidth(width int) *InputField

SetLabelWidth sets the screen width of the label. A value of 0 will cause the primitive to use the width of the label string.
func (*InputField) SetMaskCharacter ¶

func (i *InputField) SetMaskCharacter(mask rune) *InputField

SetMaskCharacter sets a character that masks user input on a screen. A value of 0 disables masking.
func (*InputField) SetPlaceholder ¶

func (i *InputField) SetPlaceholder(text string) *InputField

SetPlaceholder sets the text to be displayed when the input text is empty.
func (*InputField) SetPlaceholderStyle ¶

func (i *InputField) SetPlaceholderStyle(style tcell.Style) *InputField

SetPlaceholderStyle sets the style of the input area (when a placeholder is shown).
func (*InputField) SetPlaceholderTextColor ¶

func (i *InputField) SetPlaceholderTextColor(color tcell.Color) *InputField

SetPlaceholderTextColor sets the text color of placeholder text.
func (*InputField) SetText ¶

func (i *InputField) SetText(text string) *InputField

SetText sets the current text of the input field. This can be undone by the user. Calling this function will also trigger a "changed" event.
type List ¶

type List struct {
	*Box
	// contains filtered or unexported fields
}

List displays rows of items, each of which can be selected. List items can be shown as a single line or as two lines. They can be selected by pressing their assigned shortcut key, navigating to them and pressing Enter, or clicking on them with the mouse. The following key binds are available:

    Down arrow / tab: Move down one item.
    Up arrow / backtab: Move up one item.
    Home: Move to the first item.
    End: Move to the last item.
    Page down: Move down one page.
    Page up: Move up one page.
    Enter / Space: Select the current item.
    Right / left: Scroll horizontally. Only if the list is wider than the available space.

See List.SetChangedFunc for a way to be notified when the user navigates to a list item. See List.SetSelectedFunc for a way to be notified when a list item was selected.

See https://github.com/rivo/tview/wiki/List for an example.
func NewList ¶

func NewList() *List

NewList returns a new list.
func (*List) AddItem ¶

func (l *List) AddItem(mainText, secondaryText string, shortcut rune, selected func()) *List

AddItem calls InsertItem() with an index of -1.
func (*List) Clear ¶

func (l *List) Clear() *List

Clear removes all items from the list.
func (*List) Draw ¶

func (l *List) Draw(screen tcell.Screen)

Draw draws this primitive onto the screen.
func (*List) FindItems ¶

func (l *List) FindItems(mainSearch, secondarySearch string, mustContainBoth, ignoreCase bool) (indices []int)

FindItems searches the main and secondary texts for the given strings and returns a list of item indices in which those strings are found. One of the two search strings may be empty, it will then be ignored. Indices are always returned in ascending order.

If mustContainBoth is set to true, mainSearch must be contained in the main text AND secondarySearch must be contained in the secondary text. If it is false, only one of the two search strings must be contained.

Set ignoreCase to true for case-insensitive search.
func (*List) GetCurrentItem ¶

func (l *List) GetCurrentItem() int

GetCurrentItem returns the index of the currently selected list item, starting at 0 for the first item.
func (*List) GetItemCount ¶

func (l *List) GetItemCount() int

GetItemCount returns the number of items in the list.
func (*List) GetItemText ¶

func (l *List) GetItemText(index int) (main, secondary string)

GetItemText returns an item's texts (main and secondary). Panics if the index is out of range.
func (*List) GetOffset ¶

func (l *List) GetOffset() (int, int)

GetOffset returns the number of items skipped while drawing, as well as the number of cells item text is moved to the left. See also SetOffset() for more information on these values.
func (*List) InputHandler ¶

func (l *List) InputHandler() func(event *tcell.EventKey, setFocus func(p Primitive))

InputHandler returns the handler for this primitive.
func (*List) InsertItem ¶

func (l *List) InsertItem(index int, mainText, secondaryText string, shortcut rune, selected func()) *List

InsertItem adds a new item to the list at the specified index. An index of 0 will insert the item at the beginning, an index of 1 before the second item, and so on. An index of GetItemCount() or higher will insert the item at the end of the list. Negative indices are also allowed: An index of -1 will insert the item at the end of the list, an index of -2 before the last item, and so on. An index of -GetItemCount()-1 or lower will insert the item at the beginning.

An item has a main text which will be highlighted when selected. It also has a secondary text which is shown underneath the main text (if it is set to visible) but which may remain empty.

The shortcut is a key binding. If the specified rune is entered, the item is selected immediately. Set to 0 for no binding.

The "selected" callback will be invoked when the user selects the item. You may provide nil if no such callback is needed or if all events are handled through the selected callback set with SetSelectedFunc().

The currently selected item will shift its position accordingly. If the list was previously empty, a "changed" event is fired because the new item becomes selected.
func (*List) MouseHandler ¶

func (l *List) MouseHandler() func(action MouseAction, event *tcell.EventMouse, setFocus func(p Primitive)) (consumed bool, capture Primitive)

MouseHandler returns the mouse handler for this primitive.
func (*List) RemoveItem ¶

func (l *List) RemoveItem(index int) *List

RemoveItem removes the item with the given index (starting at 0) from the list. If a negative index is provided, items are referred to from the back (-1 = last item, -2 = second-to-last item, and so on). Out of range indices are clamped to the beginning/end, i.e. unless the list is empty, an item is always removed.

The currently selected item is shifted accordingly. If it is the one that is removed, a "changed" event is fired, unless no items are left.
func (*List) SetChangedFunc ¶

func (l *List) SetChangedFunc(handler func(index int, mainText string, secondaryText string, shortcut rune)) *List

SetChangedFunc sets the function which is called when the user navigates to a list item. The function receives the item's index in the list of items (starting with 0), its main text, secondary text, and its shortcut rune.

This function is also called when the first item is added or when SetCurrentItem() is called.
func (*List) SetCurrentItem ¶

func (l *List) SetCurrentItem(index int) *List

SetCurrentItem sets the currently selected item by its index, starting at 0 for the first item. If a negative index is provided, items are referred to from the back (-1 = last item, -2 = second-to-last item, and so on). Out of range indices are clamped to the beginning/end.

Calling this function triggers a "changed" event if the selection changes.
func (*List) SetDoneFunc ¶

func (l *List) SetDoneFunc(handler func()) *List

SetDoneFunc sets a function which is called when the user presses the Escape key.
func (*List) SetHighlightFullLine ¶

func (l *List) SetHighlightFullLine(highlight bool) *List

SetHighlightFullLine sets a flag which determines whether the colored background of selected items spans the entire width of the view. If set to true, the highlight spans the entire view. If set to false, only the text of the selected item from beginning to end is highlighted.
func (*List) SetItemText ¶

func (l *List) SetItemText(index int, main, secondary string) *List

SetItemText sets an item's main and secondary text. Panics if the index is out of range.
func (*List) SetMainTextColor ¶

func (l *List) SetMainTextColor(color tcell.Color) *List

SetMainTextColor sets the color of the items' main text.
func (*List) SetMainTextStyle ¶

func (l *List) SetMainTextStyle(style tcell.Style) *List

SetMainTextStyle sets the style of the items' main text. Note that the background color is ignored in order not to override the background color of the list itself.
func (*List) SetOffset ¶

func (l *List) SetOffset(items, horizontal int) *List

SetOffset sets the number of items to be skipped (vertically) as well as the number of cells skipped horizontally when the list is drawn. Note that one item corresponds to two rows when there are secondary texts. Shortcuts are always drawn.

These values may change when the list is drawn to ensure the currently selected item is visible and item texts move out of view. Users can also modify these values by interacting with the list.
func (*List) SetSecondaryTextColor ¶

func (l *List) SetSecondaryTextColor(color tcell.Color) *List

SetSecondaryTextColor sets the color of the items' secondary text.
func (*List) SetSecondaryTextStyle ¶

func (l *List) SetSecondaryTextStyle(style tcell.Style) *List

SetSecondaryTextStyle sets the style of the items' secondary text. Note that the background color is ignored in order not to override the background color of the list itself.
func (*List) SetSelectedBackgroundColor ¶

func (l *List) SetSelectedBackgroundColor(color tcell.Color) *List

SetSelectedBackgroundColor sets the background color of selected items.
func (*List) SetSelectedFocusOnly ¶

func (l *List) SetSelectedFocusOnly(focusOnly bool) *List

SetSelectedFocusOnly sets a flag which determines when the currently selected list item is highlighted. If set to true, selected items are only highlighted when the list has focus. If set to false, they are always highlighted.
func (*List) SetSelectedFunc ¶

func (l *List) SetSelectedFunc(handler func(int, string, string, rune)) *List

SetSelectedFunc sets the function which is called when the user selects a list item by pressing Enter on the current selection. The function receives the item's index in the list of items (starting with 0), its main text, secondary text, and its shortcut rune.
func (*List) SetSelectedStyle ¶

func (l *List) SetSelectedStyle(style tcell.Style) *List

SetSelectedStyle sets the style of the selected items. Note that the color of main text characters that are different from the main text color (e.g. color tags) is maintained.
func (*List) SetSelectedTextColor ¶

func (l *List) SetSelectedTextColor(color tcell.Color) *List

SetSelectedTextColor sets the text color of selected items. Note that the color of main text characters that are different from the main text color (e.g. style tags) is maintained.
func (*List) SetShortcutColor ¶

func (l *List) SetShortcutColor(color tcell.Color) *List

SetShortcutColor sets the color of the items' shortcut.
func (*List) SetShortcutStyle ¶

func (l *List) SetShortcutStyle(style tcell.Style) *List

SetShortcutStyle sets the style of the items' shortcut. Note that the background color is ignored in order not to override the background color of the list itself.
func (*List) SetWrapAround ¶

func (l *List) SetWrapAround(wrapAround bool) *List

SetWrapAround sets the flag that determines whether navigating the list will wrap around. That is, navigating downwards on the last item will move the selection to the first item (similarly in the other direction). If set to false, the selection won't change when navigating downwards on the last item or navigating upwards on the first item.
func (*List) ShowSecondaryText ¶

func (l *List) ShowSecondaryText(show bool) *List

ShowSecondaryText determines whether or not to show secondary item texts.
type Modal ¶

type Modal struct {
	*Box
	// contains filtered or unexported fields
}

Modal is a centered message window used to inform the user or prompt them for an immediate decision. It needs to have at least one button (added via Modal.AddButtons) or it will never disappear.

See https://github.com/rivo/tview/wiki/Modal for an example.
func NewModal ¶

func NewModal() *Modal

NewModal returns a new modal message window.
func (*Modal) AddButtons ¶

func (m *Modal) AddButtons(labels []string) *Modal

AddButtons adds buttons to the window. There must be at least one button and a "done" handler so the window can be closed again.
func (*Modal) ClearButtons ¶

func (m *Modal) ClearButtons() *Modal

ClearButtons removes all buttons from the window.
func (*Modal) Draw ¶

func (m *Modal) Draw(screen tcell.Screen)

Draw draws this primitive onto the screen.
func (*Modal) Focus ¶

func (m *Modal) Focus(delegate func(p Primitive))

Focus is called when this primitive receives focus.
func (*Modal) HasFocus ¶

func (m *Modal) HasFocus() bool

HasFocus returns whether or not this primitive has focus.
func (*Modal) InputHandler ¶

func (m *Modal) InputHandler() func(event *tcell.EventKey, setFocus func(p Primitive))

InputHandler returns the handler for this primitive.
func (*Modal) MouseHandler ¶

func (m *Modal) MouseHandler() func(action MouseAction, event *tcell.EventMouse, setFocus func(p Primitive)) (consumed bool, capture Primitive)

MouseHandler returns the mouse handler for this primitive.
func (*Modal) SetBackgroundColor ¶

func (m *Modal) SetBackgroundColor(color tcell.Color) *Modal

SetBackgroundColor sets the color of the modal frame background.
func (*Modal) SetButtonActivatedStyle ¶

func (m *Modal) SetButtonActivatedStyle(style tcell.Style) *Modal

SetButtonActivatedStyle sets the style of the buttons when they are focused.
func (*Modal) SetButtonBackgroundColor ¶

func (m *Modal) SetButtonBackgroundColor(color tcell.Color) *Modal

SetButtonBackgroundColor sets the background color of the buttons.
func (*Modal) SetButtonStyle ¶

func (m *Modal) SetButtonStyle(style tcell.Style) *Modal

SetButtonStyle sets the style of the buttons when they are not focused.
func (*Modal) SetButtonTextColor ¶

func (m *Modal) SetButtonTextColor(color tcell.Color) *Modal

SetButtonTextColor sets the color of the button texts.
func (*Modal) SetDoneFunc ¶

func (m *Modal) SetDoneFunc(handler func(buttonIndex int, buttonLabel string)) *Modal

SetDoneFunc sets a handler which is called when one of the buttons was pressed. It receives the index of the button as well as its label text. The handler is also called when the user presses the Escape key. The index will then be negative and the label text an empty string.
func (*Modal) SetFocus ¶

func (m *Modal) SetFocus(index int) *Modal

SetFocus shifts the focus to the button with the given index.
func (*Modal) SetText ¶

func (m *Modal) SetText(text string) *Modal

SetText sets the message text of the window. The text may contain line breaks but style tag states will not transfer to following lines. Note that words are wrapped, too, based on the final size of the window.
func (*Modal) SetTextColor ¶

func (m *Modal) SetTextColor(color tcell.Color) *Modal

SetTextColor sets the color of the message text.
type MouseAction ¶

type MouseAction int16

MouseAction indicates one of the actions the mouse is logically doing.

const (
	MouseMove MouseAction = iota
	MouseLeftDown
	MouseLeftUp
	MouseLeftClick
	MouseLeftDoubleClick
	MouseMiddleDown
	MouseMiddleUp
	MouseMiddleClick
	MouseMiddleDoubleClick
	MouseRightDown
	MouseRightUp
	MouseRightClick
	MouseRightDoubleClick
	MouseScrollUp
	MouseScrollDown
	MouseScrollLeft
	MouseScrollRight
)

Available mouse actions.
type Pages ¶

type Pages struct {
	*Box
	// contains filtered or unexported fields
}

Pages is a container for other primitives laid out on top of each other, overlapping or not. It is often used as the application's root primitive. It allows to easily switch the visibility of the contained primitives.

See https://github.com/rivo/tview/wiki/Pages for an example.
func NewPages ¶

func NewPages() *Pages

NewPages returns a new Pages object.
func (*Pages) AddAndSwitchToPage ¶

func (p *Pages) AddAndSwitchToPage(name string, item Primitive, resize bool) *Pages

AddAndSwitchToPage calls AddPage(), then SwitchToPage() on that newly added page.
func (*Pages) AddPage ¶

func (p *Pages) AddPage(name string, item Primitive, resize, visible bool) *Pages

AddPage adds a new page with the given name and primitive. If there was previously a page with the same name, it is overwritten. Leaving the name empty may cause conflicts in other functions so always specify a non-empty name.

Visible pages will be drawn in the order they were added (unless that order was changed in one of the other functions). If "resize" is set to true, the primitive will be set to the size available to the Pages primitive whenever the pages are drawn.
func (*Pages) Draw ¶

func (p *Pages) Draw(screen tcell.Screen)

Draw draws this primitive onto the screen.
func (*Pages) Focus ¶

func (p *Pages) Focus(delegate func(p Primitive))

Focus is called by the application when the primitive receives focus.
func (*Pages) GetFrontPage ¶

func (p *Pages) GetFrontPage() (name string, item Primitive)

GetFrontPage returns the front-most visible page. If there are no visible pages, ("", nil) is returned.
func (*Pages) GetPageCount ¶

func (p *Pages) GetPageCount() int

GetPageCount returns the number of pages currently stored in this object.
func (*Pages) HasFocus ¶

func (p *Pages) HasFocus() bool

HasFocus returns whether or not this primitive has focus.
func (*Pages) HasPage ¶

func (p *Pages) HasPage(name string) bool

HasPage returns true if a page with the given name exists in this object.
func (*Pages) HidePage ¶

func (p *Pages) HidePage(name string) *Pages

HidePage sets a page's visibility to "false".
func (*Pages) InputHandler ¶

func (p *Pages) InputHandler() func(event *tcell.EventKey, setFocus func(p Primitive))

InputHandler returns the handler for this primitive.
func (*Pages) MouseHandler ¶

func (p *Pages) MouseHandler() func(action MouseAction, event *tcell.EventMouse, setFocus func(p Primitive)) (consumed bool, capture Primitive)

MouseHandler returns the mouse handler for this primitive.
func (*Pages) RemovePage ¶

func (p *Pages) RemovePage(name string) *Pages

RemovePage removes the page with the given name. If that page was the only visible page, visibility is assigned to the last page.
func (*Pages) SendToBack ¶

func (p *Pages) SendToBack(name string) *Pages

SendToBack changes the order of the pages such that the page with the given name comes first, causing it to be drawn first with the next update (if visible).
func (*Pages) SendToFront ¶

func (p *Pages) SendToFront(name string) *Pages

SendToFront changes the order of the pages such that the page with the given name comes last, causing it to be drawn last with the next update (if visible).
func (*Pages) SetChangedFunc ¶

func (p *Pages) SetChangedFunc(handler func()) *Pages

SetChangedFunc sets a handler which is called whenever the visibility or the order of any visible pages changes. This can be used to redraw the pages.
func (*Pages) ShowPage ¶

func (p *Pages) ShowPage(name string) *Pages

ShowPage sets a page's visibility to "true" (in addition to any other pages which are already visible).
func (*Pages) SwitchToPage ¶

func (p *Pages) SwitchToPage(name string) *Pages

SwitchToPage sets a page's visibility to "true" and all other pages' visibility to "false".
type Primitive ¶

type Primitive interface {
	// Draw draws this primitive onto the screen. Implementers can call the
	// screen's ShowCursor() function but should only do so when they have focus.
	// (They will need to keep track of this themselves.)
	Draw(screen tcell.Screen)

	// GetRect returns the current position of the primitive, x, y, width, and
	// height.
	GetRect() (int, int, int, int)

	// SetRect sets a new position of the primitive.
	SetRect(x, y, width, height int)

	// InputHandler returns a handler which receives key events when it has focus.
	// It is called by the Application class.
	//
	// A value of nil may also be returned, in which case this primitive cannot
	// receive focus and will not process any key events.
	//
	// The handler will receive the key event and a function that allows it to
	// set the focus to a different primitive, so that future key events are sent
	// to that primitive.
	//
	// The Application's Draw() function will be called automatically after the
	// handler returns.
	//
	// The Box class provides functionality to intercept keyboard input. If you
	// subclass from Box, it is recommended that you wrap your handler using
	// Box.WrapInputHandler() so you inherit that functionality.
	InputHandler() func(event *tcell.EventKey, setFocus func(p Primitive))

	// Focus is called by the application when the primitive receives focus.
	// Implementers may call delegate() to pass the focus on to another primitive.
	Focus(delegate func(p Primitive))

	// HasFocus determines if the primitive has focus. This function must return
	// true also if one of this primitive's child elements has focus.
	HasFocus() bool

	// Blur is called by the application when the primitive loses focus.
	Blur()

	// MouseHandler returns a handler which receives mouse events.
	// It is called by the Application class.
	//
	// A value of nil may also be returned to stop the downward propagation of
	// mouse events.
	//
	// The Box class provides functionality to intercept mouse events. If you
	// subclass from Box, it is recommended that you wrap your handler using
	// Box.WrapMouseHandler() so you inherit that functionality.
	MouseHandler() func(action MouseAction, event *tcell.EventMouse, setFocus func(p Primitive)) (consumed bool, capture Primitive)
}

Primitive is the top-most interface for all graphical primitives.
type Table ¶

type Table struct {
	*Box
	// contains filtered or unexported fields
}

    Fixed Columns
    Selections
    Navigation

Table visualizes two-dimensional data consisting of rows and columns. Each Table cell is defined via SetCell() by the TableCell type. They can be added dynamically to the table and changed any time.

The most compact display of a table is without borders. Each row will then occupy one row on screen and columns are separated by the rune defined via SetSeparator() (a space character by default).

When borders are turned on (via SetBorders()), each table cell is surrounded by lines. Therefore one table row will require two rows on screen.

Columns will use as much horizontal space as they need. You can constrain their size with the MaxWidth parameter of the TableCell type.
Fixed Columns
¶

You can define fixed rows and rolumns via SetFixed(). They will always stay in their place, even when the table is scrolled. Fixed rows are always the top rows. Fixed columns are always the leftmost columns.
Selections
¶

You can call SetSelectable() to set columns and/or rows to "selectable". If the flag is set only for columns, entire columns can be selected by the user. If it is set only for rows, entire rows can be selected. If both flags are set, individual cells can be selected. The "selected" handler set via SetSelectedFunc() is invoked when the user presses Enter on a selection.
Navigation
¶

If the table extends beyond the available space, it can be navigated with key bindings similar to Vim:

    h, left arrow: Move left by one column.
    l, right arrow: Move right by one column.
    j, down arrow: Move down by one row.
    k, up arrow: Move up by one row.
    g, home: Move to the top.
    G, end: Move to the bottom.
    Ctrl-F, page down: Move down by one page.
    Ctrl-B, page up: Move up by one page.

When there is no selection, this affects the entire table (except for fixed rows and columns). When there is a selection, the user moves the selection. The class will attempt to keep the selection from moving out of the screen.

Use SetInputCapture() to override or modify keyboard input.

See https://github.com/rivo/tview/wiki/Table for an example.
func NewTable ¶

func NewTable() *Table

NewTable returns a new table.
func (*Table) Clear ¶

func (t *Table) Clear() *Table

Clear removes all table data.
func (*Table) Draw ¶

func (t *Table) Draw(screen tcell.Screen)

Draw draws this primitive onto the screen.
func (*Table) GetCell ¶

func (t *Table) GetCell(row, column int) *TableCell

GetCell returns the contents of the cell at the specified position. A valid TableCell object is always returned but it will be uninitialized if the cell was not previously set. Such an uninitialized object will not automatically be inserted. Therefore, repeated calls to this function may return different pointers for uninitialized cells.
func (*Table) GetColumnCount ¶

func (t *Table) GetColumnCount() int

GetColumnCount returns the (maximum) number of columns in the table.
func (*Table) GetOffset ¶

func (t *Table) GetOffset() (row, column int)

GetOffset returns the current row and column offset. This indicates how many rows and columns the table is scrolled down and to the right.
func (*Table) GetRowCount ¶

func (t *Table) GetRowCount() int

GetRowCount returns the number of rows in the table.
func (*Table) GetSelectable ¶

func (t *Table) GetSelectable() (rows, columns bool)

GetSelectable returns what can be selected in a table. Refer to SetSelectable() for details.
func (*Table) GetSelection ¶

func (t *Table) GetSelection() (row, column int)

GetSelection returns the position of the current selection. If entire rows are selected, the column index is undefined. Likewise for entire columns.
func (*Table) InputHandler ¶

func (t *Table) InputHandler() func(event *tcell.EventKey, setFocus func(p Primitive))

InputHandler returns the handler for this primitive.
func (*Table) InsertColumn ¶

func (t *Table) InsertColumn(column int) *Table

InsertColumn inserts a column before the column with the given index. Cells in the given column and to its right will be shifted to the right by one column. Rows that have fewer initialized cells than "column" will remain unchanged.
func (*Table) InsertRow ¶

func (t *Table) InsertRow(row int) *Table

InsertRow inserts a row before the row with the given index. Cells on the given row and below will be shifted to the bottom by one row. If "row" is equal or larger than the current number of rows, this function has no effect.
func (*Table) MouseHandler ¶

func (t *Table) MouseHandler() func(action MouseAction, event *tcell.EventMouse, setFocus func(p Primitive)) (consumed bool, capture Primitive)

MouseHandler returns the mouse handler for this primitive.
func (*Table) RemoveColumn ¶

func (t *Table) RemoveColumn(column int) *Table

RemoveColumn removes the column at the given position from the table. If there is no such column, this has no effect.
func (*Table) RemoveRow ¶

func (t *Table) RemoveRow(row int) *Table

RemoveRow removes the row at the given position from the table. If there is no such row, this has no effect.
func (*Table) ScrollToBeginning ¶

func (t *Table) ScrollToBeginning() *Table

ScrollToBeginning scrolls the table to the beginning to that the top left corner of the table is shown. Note that this position may be corrected if there is a selection.
func (*Table) ScrollToEnd ¶

func (t *Table) ScrollToEnd() *Table

ScrollToEnd scrolls the table to the beginning to that the bottom left corner of the table is shown. Adding more rows to the table will cause it to automatically scroll with the new data. Note that this position may be corrected if there is a selection.
func (*Table) Select ¶

func (t *Table) Select(row, column int) *Table

Select sets the selected cell. Depending on the selection settings specified via SetSelectable(), this may be an entire row or column, or even ignored completely. The "selection changed" event is fired if such a callback is available (even if the selection ends up being the same as before and even if cells are not selectable).
func (*Table) SetBorders ¶

func (t *Table) SetBorders(show bool) *Table

SetBorders sets whether or not each cell in the table is surrounded by a border.
func (*Table) SetBordersColor ¶

func (t *Table) SetBordersColor(color tcell.Color) *Table

SetBordersColor sets the color of the cell borders.
func (*Table) SetCell ¶

func (t *Table) SetCell(row, column int, cell *TableCell) *Table

SetCell sets the content of a cell the specified position. It is ok to directly instantiate a TableCell object. If the cell has content, at least the Text and Color fields should be set.

Note that setting cells in previously unknown rows and columns will automatically extend the internal table representation with empty TableCell objects, e.g. starting with a row of 100,000 will immediately create 100,000 empty rows.

To avoid unnecessary garbage collection, fill columns from left to right.
func (*Table) SetCellSimple ¶

func (t *Table) SetCellSimple(row, column int, text string) *Table

SetCellSimple calls SetCell() with the given text, left-aligned, in white.
func (*Table) SetContent ¶

func (t *Table) SetContent(content TableContent) *Table

SetContent sets a new content type for this table. This allows you to back the table by a data structure of your own, for example one that cannot be fully held in memory. For details, see the TableContent interface documentation.

A value of nil will return the table to its default implementation where all of its table cells are kept in memory.
func (*Table) SetDoneFunc ¶

func (t *Table) SetDoneFunc(handler func(key tcell.Key)) *Table

SetDoneFunc sets a handler which is called whenever the user presses the Escape, Tab, or Backtab key. If nothing is selected, it is also called when user presses the Enter key (because pressing Enter on a selection triggers the "selected" handler set via SetSelectedFunc()).
func (*Table) SetEvaluateAllRows ¶

func (t *Table) SetEvaluateAllRows(all bool) *Table

SetEvaluateAllRows sets a flag which determines the rows to be evaluated when calculating the widths of the table's columns. When false, only visible rows are evaluated. When true, all rows in the table are evaluated.

Set this flag to true to avoid shifting column widths when the table is scrolled. (May come with a performance penalty for large tables.)

Use with caution on very large tables, especially those not backed by the default TableContent data structure.
func (*Table) SetFixed ¶

func (t *Table) SetFixed(rows, columns int) *Table

SetFixed sets the number of fixed rows and columns which are always visible even when the rest of the cells are scrolled out of view. Rows are always the top-most ones. Columns are always the left-most ones.
func (*Table) SetOffset ¶

func (t *Table) SetOffset(row, column int) *Table

SetOffset sets how many rows and columns should be skipped when drawing the table. This is useful for large tables that do not fit on the screen. Navigating a selection can change these values.

Fixed rows and columns are never skipped.
func (*Table) SetSelectable ¶

func (t *Table) SetSelectable(rows, columns bool) *Table

SetSelectable sets the flags which determine what can be selected in a table. There are three selection modi:

    rows = false, columns = false: Nothing can be selected.
    rows = true, columns = false: Rows can be selected.
    rows = false, columns = true: Columns can be selected.
    rows = true, columns = true: Individual cells can be selected.

func (*Table) SetSelectedFunc ¶

func (t *Table) SetSelectedFunc(handler func(row, column int)) *Table

SetSelectedFunc sets a handler which is called whenever the user presses the Enter key on a selected cell/row/column. The handler receives the position of the selection and its cell contents. If entire rows are selected, the column index is undefined. Likewise for entire columns.
func (*Table) SetSelectedStyle ¶

func (t *Table) SetSelectedStyle(style tcell.Style) *Table

SetSelectedStyle sets a specific style for selected cells. If no such style is set, per default, selected cells are inverted (i.e. their foreground and background colors are swapped).

To reset a previous setting to its default, make the following call:

table.SetSelectedStyle(tcell.Style{})

func (*Table) SetSelectionChangedFunc ¶

func (t *Table) SetSelectionChangedFunc(handler func(row, column int)) *Table

SetSelectionChangedFunc sets a handler which is called whenever the current selection changes. The handler receives the position of the new selection. If entire rows are selected, the column index is undefined. Likewise for entire columns.
func (*Table) SetSeparator ¶

func (t *Table) SetSeparator(separator rune) *Table

SetSeparator sets the character used to fill the space between two neighboring cells. This is a space character ' ' per default but you may want to set it to Borders.Vertical (or any other rune) if the column separation should be more visible. If cell borders are activated, this is ignored.

Separators have the same color as borders.
func (*Table) SetWrapSelection ¶

func (t *Table) SetWrapSelection(vertical, horizontal bool) *Table

SetWrapSelection determines whether a selection wraps vertically or horizontally when moved. Vertically wrapping selections will jump from the last selectable row to the first selectable row and vice versa. Horizontally wrapping selections will jump from the last selectable column to the first selectable column (on the next selectable row) or from the first selectable column to the last selectable column (on the previous selectable row). If set to false, the selection is not moved when it is already on the first/last selectable row/column.

The default is for both values to be false.
type TableCell ¶

type TableCell struct {
	// The reference object.
	Reference interface{}

	// The text to be displayed in the table cell.
	Text string

	// The alignment of the cell text. One of AlignLeft (default), AlignCenter,
	// or AlignRight.
	Align int

	// The maximum width of the cell in screen space. This is used to give a
	// column a maximum width. Any cell text whose screen width exceeds this width
	// is cut off. Set to 0 if there is no maximum width.
	MaxWidth int

	// If the total table width is less than the available width, this value is
	// used to add extra width to a column. See SetExpansion() for details.
	Expansion int

	// The color of the cell text.
	Color tcell.Color

	// The background color of the cell.
	BackgroundColor tcell.Color

	// If set to true, the BackgroundColor is not used and the cell will have
	// the background color of the table.
	Transparent bool

	// The style attributes of the cell.
	Attributes tcell.AttrMask

	// If set to true, this cell cannot be selected.
	NotSelectable bool

	// An optional handler for mouse clicks. This also fires if the cell is not
	// selectable. If true is returned, no additional "selected" event is fired
	// on selectable cells.
	Clicked func() bool
	// contains filtered or unexported fields
}

TableCell represents one cell inside a Table. You can instantiate this type directly but all colors (background and text) will be set to their default which is black.
func NewTableCell ¶

func NewTableCell(text string) *TableCell

NewTableCell returns a new table cell with sensible defaults. That is, left aligned text with the primary text color (see Styles) and a transparent background (using the background of the Table).
func (*TableCell) GetLastPosition ¶

func (c *TableCell) GetLastPosition() (x, y, width int)

GetLastPosition returns the position of the table cell the last time it was drawn on screen. If the cell is not on screen, the return values are undefined.

Because the Table class will attempt to keep selected cells on screen, this function is most useful in response to a "selected" event (see SetSelectedFunc()) or a "selectionChanged" event (see SetSelectionChangedFunc()).
func (*TableCell) GetReference ¶

func (c *TableCell) GetReference() interface{}

GetReference returns this cell's reference object.
func (*TableCell) SetAlign ¶

func (c *TableCell) SetAlign(align int) *TableCell

SetAlign sets the cell's text alignment, one of AlignLeft, AlignCenter, or AlignRight.
func (*TableCell) SetAttributes ¶

func (c *TableCell) SetAttributes(attr tcell.AttrMask) *TableCell

SetAttributes sets the cell's text attributes. You can combine different attributes using bitmask operations:

cell.SetAttributes(tcell.AttrUnderline | tcell.AttrBold)

func (*TableCell) SetBackgroundColor ¶

func (c *TableCell) SetBackgroundColor(color tcell.Color) *TableCell

SetBackgroundColor sets the cell's background color. This will also cause the cell's Transparent flag to be set to "false".
func (*TableCell) SetClickedFunc ¶

func (c *TableCell) SetClickedFunc(clicked func() bool) *TableCell

SetClickedFunc sets a handler which fires when this cell is clicked. This is independent of whether the cell is selectable or not. But for selectable cells, if the function returns "true", the "selected" event is not fired.
func (*TableCell) SetExpansion ¶

func (c *TableCell) SetExpansion(expansion int) *TableCell

SetExpansion sets the value by which the column of this cell expands if the available width for the table is more than the table width (prior to applying this expansion value). This is a proportional value. The amount of unused horizontal space is divided into widths to be added to each column. How much extra width a column receives depends on the expansion value: A value of 0 (the default) will not cause the column to increase in width. Other values are proportional, e.g. a value of 2 will cause a column to grow by twice the amount of a column with a value of 1.

Since this value affects an entire column, the maximum over all visible cells in that column is used.

This function panics if a negative value is provided.
func (*TableCell) SetMaxWidth ¶

func (c *TableCell) SetMaxWidth(maxWidth int) *TableCell

SetMaxWidth sets maximum width of the cell in screen space. This is used to give a column a maximum width. Any cell text whose screen width exceeds this width is cut off. Set to 0 if there is no maximum width.
func (*TableCell) SetReference ¶

func (c *TableCell) SetReference(reference interface{}) *TableCell

SetReference allows you to store a reference of any type in this cell. This will allow you to establish a mapping between the cell and your actual data.
func (*TableCell) SetSelectable ¶

func (c *TableCell) SetSelectable(selectable bool) *TableCell

SetSelectable sets whether or not this cell can be selected by the user.
func (*TableCell) SetStyle ¶

func (c *TableCell) SetStyle(style tcell.Style) *TableCell

SetStyle sets the cell's style (foreground color, background color, and attributes) all at once.
func (*TableCell) SetText ¶

func (c *TableCell) SetText(text string) *TableCell

SetText sets the cell's text.
func (*TableCell) SetTextColor ¶

func (c *TableCell) SetTextColor(color tcell.Color) *TableCell

SetTextColor sets the cell's text color.
func (*TableCell) SetTransparency ¶

func (c *TableCell) SetTransparency(transparent bool) *TableCell

SetTransparency sets the background transparency of this cell. A value of "true" will cause the cell to use the table's background color. A value of "false" will cause it to use its own background color.
type TableContent ¶

type TableContent interface {
	// Return the cell at the given position or nil if there is no cell. The
	// row and column arguments start at 0 and end at what GetRowCount() and
	// GetColumnCount() return, minus 1.
	GetCell(row, column int) *TableCell

	// Return the total number of rows in the table.
	GetRowCount() int

	// Return the total number of columns in the table.
	GetColumnCount() int

	// Set the cell at the given position to the provided cell.
	SetCell(row, column int, cell *TableCell)

	// Remove the row at the given position by shifting all following rows up
	// by one. Out of range positions may be ignored.
	RemoveRow(row int)

	// Remove the column at the given position by shifting all following columns
	// left by one. Out of range positions may be ignored.
	RemoveColumn(column int)

	// Insert a new empty row at the given position by shifting all rows at that
	// position and below down by one. Implementers may decide what to do with
	// out of range positions.
	InsertRow(row int)

	// Insert a new empty column at the given position by shifting all columns
	// at that position and to the right by one to the right. Implementers may
	// decide what to do with out of range positions.
	InsertColumn(column int)

	// Remove all table data.
	Clear()
}

TableContent defines a Table's data. You may replace a Table's default implementation with your own using the Table.SetContent() function. This will allow you to turn Table into a view of your own data structure. The Table.Draw() function, which is called when the screen is updated, will then use the (read-only) functions of this interface to update the table. The write functions are only called when the corresponding functions of Table are called.
