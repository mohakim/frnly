
MouseHandler returns the mouse handler for this primitive.
func (*Checkbox) SetChangedFunc ¶

func (c *Checkbox) SetChangedFunc(handler func(checked bool)) *Checkbox

SetChangedFunc sets a handler which is called when the checked state of this checkbox was changed. The handler function receives the new state.
func (*Checkbox) SetChecked ¶

func (c *Checkbox) SetChecked(checked bool) *Checkbox

SetChecked sets the state of the checkbox. This also triggers the "changed" callback if the state changes with this call.
func (*Checkbox) SetCheckedString ¶

func (c *Checkbox) SetCheckedString(checked string) *Checkbox

SetCheckedString sets the string to be displayed when the checkbox is checked (defaults to "X").
func (*Checkbox) SetDisabled ¶

func (c *Checkbox) SetDisabled(disabled bool) FormItem

SetDisabled sets whether or not the item is disabled / read-only.
func (*Checkbox) SetDoneFunc ¶

func (c *Checkbox) SetDoneFunc(handler func(key tcell.Key)) *Checkbox

SetDoneFunc sets a handler which is called when the user is done using the checkbox. The callback function is provided with the key that was pressed, which is one of the following:

    KeyEscape: Abort text input.
    KeyTab: Move to the next field.
    KeyBacktab: Move to the previous field.

func (*Checkbox) SetFieldBackgroundColor ¶

func (c *Checkbox) SetFieldBackgroundColor(color tcell.Color) *Checkbox

SetFieldBackgroundColor sets the background color of the input area.
func (*Checkbox) SetFieldTextColor ¶

func (c *Checkbox) SetFieldTextColor(color tcell.Color) *Checkbox

SetFieldTextColor sets the text color of the input area.
func (*Checkbox) SetFinishedFunc ¶

func (c *Checkbox) SetFinishedFunc(handler func(key tcell.Key)) FormItem

SetFinishedFunc sets a callback invoked when the user leaves this form item.
func (*Checkbox) SetFormAttributes ¶

func (c *Checkbox) SetFormAttributes(labelWidth int, labelColor, bgColor, fieldTextColor, fieldBgColor tcell.Color) FormItem

SetFormAttributes sets attributes shared by all form items.
func (*Checkbox) SetLabel ¶

func (c *Checkbox) SetLabel(label string) *Checkbox

SetLabel sets the text to be displayed before the input area.
func (*Checkbox) SetLabelColor ¶

func (c *Checkbox) SetLabelColor(color tcell.Color) *Checkbox

SetLabelColor sets the color of the label.
func (*Checkbox) SetLabelWidth ¶

func (c *Checkbox) SetLabelWidth(width int) *Checkbox

SetLabelWidth sets the screen width of the label. A value of 0 will cause the primitive to use the width of the label string.
type DropDown ¶

type DropDown struct {
	*Box
	// contains filtered or unexported fields
}

DropDown implements a selection widget whose options become visible in a drop-down list when activated.

See https://github.com/rivo/tview/wiki/DropDown for an example.
func NewDropDown ¶

func NewDropDown() *DropDown

NewDropDown returns a new drop-down.
func (*DropDown) AddOption ¶

func (d *DropDown) AddOption(text string, selected func()) *DropDown

AddOption adds a new selectable option to this drop-down. The "selected" callback is called when this option was selected. It may be nil.
func (*DropDown) Draw ¶

func (d *DropDown) Draw(screen tcell.Screen)

Draw draws this primitive onto the screen.
func (*DropDown) Focus ¶

func (d *DropDown) Focus(delegate func(p Primitive))

Focus is called by the application when the primitive receives focus.
func (*DropDown) GetCurrentOption ¶

func (d *DropDown) GetCurrentOption() (int, string)

GetCurrentOption returns the index of the currently selected option as well as its text. If no option was selected, -1 and an empty string is returned.
func (*DropDown) GetFieldHeight ¶

func (d *DropDown) GetFieldHeight() int

GetFieldHeight returns this primitive's field height.
func (*DropDown) GetFieldWidth ¶

func (d *DropDown) GetFieldWidth() int

GetFieldWidth returns this primitive's field screen width.
func (*DropDown) GetLabel ¶

func (d *DropDown) GetLabel() string

GetLabel returns the text to be displayed before the input area.
func (*DropDown) GetOptionCount ¶

func (d *DropDown) GetOptionCount() int

GetOptionCount returns the number of options in the drop-down.
func (*DropDown) HasFocus ¶

func (d *DropDown) HasFocus() bool

HasFocus returns whether or not this primitive has focus.
func (*DropDown) InputHandler ¶

func (d *DropDown) InputHandler() func(event *tcell.EventKey, setFocus func(p Primitive))

InputHandler returns the handler for this primitive.
func (*DropDown) IsOpen ¶

func (d *DropDown) IsOpen() bool

IsOpen returns true if the drop-down list is currently open.
func (*DropDown) MouseHandler ¶

func (d *DropDown) MouseHandler() func(action MouseAction, event *tcell.EventMouse, setFocus func(p Primitive)) (consumed bool, capture Primitive)

MouseHandler returns the mouse handler for this primitive.
func (*DropDown) RemoveOption ¶

func (d *DropDown) RemoveOption(index int) *DropDown

RemoveOption removes the specified option from the drop-down. Panics if the index is out of range.
func (*DropDown) SetCurrentOption ¶

func (d *DropDown) SetCurrentOption(index int) *DropDown

SetCurrentOption sets the index of the currently selected option. This may be a negative value to indicate that no option is currently selected. Calling this function will also trigger the "selected" callback (if there is one).
func (*DropDown) SetDisabled ¶

func (d *DropDown) SetDisabled(disabled bool) FormItem

SetDisabled sets whether or not the item is disabled / read-only.
func (*DropDown) SetDoneFunc ¶

func (d *DropDown) SetDoneFunc(handler func(key tcell.Key)) *DropDown

SetDoneFunc sets a handler which is called when the user is done selecting options. The callback function is provided with the key that was pressed, which is one of the following:

    KeyEscape: Abort selection.
    KeyTab: Move to the next field.
    KeyBacktab: Move to the previous field.

func (*DropDown) SetFieldBackgroundColor ¶

func (d *DropDown) SetFieldBackgroundColor(color tcell.Color) *DropDown

SetFieldBackgroundColor sets the background color of the options area.
func (*DropDown) SetFieldTextColor ¶

func (d *DropDown) SetFieldTextColor(color tcell.Color) *DropDown

SetFieldTextColor sets the text color of the options area.
func (*DropDown) SetFieldWidth ¶

func (d *DropDown) SetFieldWidth(width int) *DropDown

SetFieldWidth sets the screen width of the options area. A value of 0 means extend to as long as the longest option text.
func (*DropDown) SetFinishedFunc ¶

func (d *DropDown) SetFinishedFunc(handler func(key tcell.Key)) FormItem

SetFinishedFunc sets a callback invoked when the user leaves this form item.
func (*DropDown) SetFormAttributes ¶

func (d *DropDown) SetFormAttributes(labelWidth int, labelColor, bgColor, fieldTextColor, fieldBgColor tcell.Color) FormItem

SetFormAttributes sets attributes shared by all form items.
func (*DropDown) SetLabel ¶

func (d *DropDown) SetLabel(label string) *DropDown

SetLabel sets the text to be displayed before the input area.
func (*DropDown) SetLabelColor ¶

func (d *DropDown) SetLabelColor(color tcell.Color) *DropDown

SetLabelColor sets the color of the label.
func (*DropDown) SetLabelWidth ¶

func (d *DropDown) SetLabelWidth(width int) *DropDown

SetLabelWidth sets the screen width of the label. A value of 0 will cause the primitive to use the width of the label string.
func (*DropDown) SetListStyles ¶

func (d *DropDown) SetListStyles(unselected, selected tcell.Style) *DropDown

SetListStyles sets the styles of the items in the drop-down list (unselected as well as selected items). Style attributes are currently ignored but may be used in the future.
func (*DropDown) SetOptions ¶

func (d *DropDown) SetOptions(texts []string, selected func(text string, index int)) *DropDown

SetOptions replaces all current options with the ones provided and installs one callback function which is called when one of the options is selected. It will be called with the option's text and its index into the options slice. The "selected" parameter may be nil.
func (*DropDown) SetPrefixTextColor ¶

func (d *DropDown) SetPrefixTextColor(color tcell.Color) *DropDown

SetPrefixTextColor sets the color of the prefix string. The prefix string is shown when the user starts typing text, which directly selects the first option that starts with the typed string.
func (*DropDown) SetSelectedFunc ¶

func (d *DropDown) SetSelectedFunc(handler func(text string, index int)) *DropDown

SetSelectedFunc sets a handler which is called when the user changes the drop-down's option. This handler will be called in addition and prior to an option's optional individual handler. The handler is provided with the selected option's text and index. If "no option" was selected, these values are an empty string and -1.
func (*DropDown) SetTextOptions ¶

func (d *DropDown) SetTextOptions(prefix, suffix, currentPrefix, currentSuffix, noSelection string) *DropDown

SetTextOptions sets the text to be placed before and after each drop-down option (prefix/suffix), the text placed before and after the currently selected option (currentPrefix/currentSuffix) as well as the text to be displayed when no option is currently selected. Per default, all of these strings are empty.
type Flex ¶

type Flex struct {
	*Box
	// contains filtered or unexported fields
}

Flex is a basic implementation of the Flexbox layout. The contained primitives are arranged horizontally or vertically. The way they are distributed along that dimension depends on their layout settings, which is either a fixed length or a proportional length. See AddItem() for details.

See https://github.com/rivo/tview/wiki/Flex for an example.
func NewFlex ¶

func NewFlex() *Flex

NewFlex returns a new flexbox layout container with no primitives and its direction set to FlexColumn. To add primitives to this layout, see AddItem(). To change the direction, see SetDirection().

Note that Box, the superclass of Flex, will not clear its contents so that any nil flex items will leave their background unchanged. To clear a Flex's background before any items are drawn, set it to a box with the desired color:

flex.Box = NewBox()

func (*Flex) AddItem ¶

func (f *Flex) AddItem(item Primitive, fixedSize, proportion int, focus bool) *Flex

AddItem adds a new item to the container. The "fixedSize" argument is a width or height that may not be changed by the layout algorithm. A value of 0 means that its size is flexible and may be changed. The "proportion" argument defines the relative size of the item compared to other flexible-size items. For example, items with a proportion of 2 will be twice as large as items with a proportion of 1. The proportion must be at least 1 if fixedSize == 0 (ignored otherwise).

If "focus" is set to true, the item will receive focus when the Flex primitive receives focus. If multiple items have the "focus" flag set to true, the first one will receive focus.

You can provide a nil value for the primitive. This will still consume screen space but nothing will be drawn.
func (*Flex) Clear ¶

func (f *Flex) Clear() *Flex

Clear removes all items from the container.
func (*Flex) Draw ¶

func (f *Flex) Draw(screen tcell.Screen)

Draw draws this primitive onto the screen.
func (*Flex) Focus ¶

func (f *Flex) Focus(delegate func(p Primitive))

Focus is called when this primitive receives focus.
func (*Flex) GetItem ¶

func (f *Flex) GetItem(index int) Primitive

GetItem returns the primitive at the given index, starting with 0 for the first primitive in this container.

This function will panic for out of range indices.
func (*Flex) GetItemCount ¶

func (f *Flex) GetItemCount() int

GetItemCount returns the number of items in this container.
func (*Flex) HasFocus ¶

func (f *Flex) HasFocus() bool

HasFocus returns whether or not this primitive has focus.
func (*Flex) InputHandler ¶

func (f *Flex) InputHandler() func(event *tcell.EventKey, setFocus func(p Primitive))

InputHandler returns the handler for this primitive.
func (*Flex) MouseHandler ¶

func (f *Flex) MouseHandler() func(action MouseAction, event *tcell.EventMouse, setFocus func(p Primitive)) (consumed bool, capture Primitive)

MouseHandler returns the mouse handler for this primitive.
func (*Flex) RemoveItem ¶

func (f *Flex) RemoveItem(p Primitive) *Flex

RemoveItem removes all items for the given primitive from the container, keeping the order of the remaining items intact.
func (*Flex) ResizeItem ¶

func (f *Flex) ResizeItem(p Primitive, fixedSize, proportion int) *Flex

ResizeItem sets a new size for the item(s) with the given primitive. If there are multiple Flex items with the same primitive, they will all receive the same size. For details regarding the size parameters, see AddItem().
func (*Flex) SetDirection ¶

func (f *Flex) SetDirection(direction int) *Flex

SetDirection sets the direction in which the contained primitives are distributed. This can be either FlexColumn (default) or FlexRow. Note that these are the opposite of what you would expect coming from CSS. You may also use FlexColumnCSS or FlexRowCSS, to remain in line with the CSS definition.
func (*Flex) SetFullScreen ¶

func (f *Flex) SetFullScreen(fullScreen bool) *Flex

SetFullScreen sets the flag which, when true, causes the flex layout to use the entire screen space instead of whatever size it is currently assigned to.
type Form ¶

type Form struct {
	*Box
	// contains filtered or unexported fields
}

Form allows you to combine multiple one-line form elements into a vertical or horizontal layout. Form elements include types such as InputField or Checkbox. These elements can be optionally followed by one or more buttons for which you can define form-wide actions (e.g. Save, Clear, Cancel).

See https://github.com/rivo/tview/wiki/Form for an example.
func NewForm ¶

func NewForm() *Form

NewForm returns a new form.
func (*Form) AddButton ¶

func (f *Form) AddButton(label string, selected func()) *Form

AddButton adds a new button to the form. The "selected" function is called when the user selects this button. It may be nil.
func (*Form) AddCheckbox ¶

func (f *Form) AddCheckbox(label string, checked bool, changed func(checked bool)) *Form

AddCheckbox adds a checkbox to the form. It has a label, an initial state, and an (optional) callback function which is invoked when the state of the checkbox was changed by the user.
func (*Form) AddDropDown ¶

func (f *Form) AddDropDown(label string, options []string, initialOption int, selected func(option string, optionIndex int)) *Form

AddDropDown adds a drop-down element to the form. It has a label, options, and an (optional) callback function which is invoked when an option was selected. The initial option may be a negative value to indicate that no option is currently selected.
func (*Form) AddFormItem ¶

func (f *Form) AddFormItem(item FormItem) *Form

AddFormItem adds a new item to the form. This can be used to add your own objects to the form. Note, however, that the Form class will override some of its attributes to make it work in the form context. Specifically, these are:

    The label width
    The label color
    The background color
    The field text color
    The field background color

func (*Form) AddImage ¶

func (f *Form) AddImage(label string, image image.Image, width, height, colors int) *Form

AddImage adds an image to the form. It has a label and the image will fit in the specified width and height (its aspect ratio is preserved). See Image.SetColors for a description of the "colors" parameter. Images are not interactive and are skipped over in a form. The "width" value may be 0 (adjust dynamically) but "height" should generally be a positive value.
func (*Form) AddInputField ¶

func (f *Form) AddInputField(label, value string, fieldWidth int, accept func(textToCheck string, lastChar rune) bool, changed func(text string)) *Form

AddInputField adds an input field to the form. It has a label, an optional initial value, a field width (a value of 0 extends it as far as possible), an optional accept function to validate the item's value (set to nil to accept any text), and an (optional) callback function which is invoked when the input field's text has changed.
func (*Form) AddPasswordField ¶

func (f *Form) AddPasswordField(label, value string, fieldWidth int, mask rune, changed func(text string)) *Form

AddPasswordField adds a password field to the form. This is similar to an input field except that the user's input not shown. Instead, a "mask" character is displayed. The password field has a label, an optional initial value, a field width (a value of 0 extends it as far as possible), and an (optional) callback function which is invoked when the input field's text has changed.
func (*Form) AddTextArea ¶

func (f *Form) AddTextArea(label, text string, fieldWidth, fieldHeight, maxLength int, changed func(text string)) *Form

AddTextArea adds a text area to the form. It has a label, an optional initial text, a size (width and height) referring to the actual input area (a fieldWidth of 0 extends it as far right as possible, a fieldHeight of 0 will cause it to be DefaultFormFieldHeight), and a maximum number of bytes of text allowed (0 means no limit).

The optional callback function is invoked when the content of the text area has changed. Note that especially for larger texts, this is an expensive operation due to technical constraints of the TextArea primitive (every key stroke leads to a new reallocation of the entire text).
func (*Form) AddTextView ¶

func (f *Form) AddTextView(label, text string, fieldWidth, fieldHeight int, dynamicColors, scrollable bool) *Form

AddTextView adds a text view to the form. It has a label and text, a size (width and height) referring to the actual text element (a fieldWidth of 0 extends it as far right as possible, a fieldHeight of 0 will cause it to be DefaultFormFieldHeight), a flag to turn on/off dynamic colors, and a flag to turn on/off scrolling. If scrolling is turned off, the text view will not receive focus.
func (*Form) Clear ¶

func (f *Form) Clear(includeButtons bool) *Form

Clear removes all input elements from the form, including the buttons if specified.
func (*Form) ClearButtons ¶

func (f *Form) ClearButtons() *Form

ClearButtons removes all buttons from the form.
func (*Form) Draw ¶

func (f *Form) Draw(screen tcell.Screen)

Draw draws this primitive onto the screen.
func (*Form) Focus ¶

func (f *Form) Focus(delegate func(p Primitive))

Focus is called by the application when the primitive receives focus.
func (*Form) GetButton ¶

func (f *Form) GetButton(index int) *Button

GetButton returns the button at the specified 0-based index. Note that buttons have been specially prepared for this form and modifying some of their attributes may have unintended side effects.
func (*Form) GetButtonCount ¶

func (f *Form) GetButtonCount() int

GetButtonCount returns the number of buttons in this form.
func (*Form) GetButtonIndex ¶

func (f *Form) GetButtonIndex(label string) int

GetButtonIndex returns the index of the button with the given label, starting with 0 for the button that was added first. If no such label was found, -1 is returned.
func (*Form) GetFocusedItemIndex ¶

func (f *Form) GetFocusedItemIndex() (formItem, button int)

GetFocusedItemIndex returns the indices of the form element or button which currently has focus. If they don't, -1 is returned respectively.
func (*Form) GetFormItem ¶

func (f *Form) GetFormItem(index int) FormItem

GetFormItem returns the form item at the given position, starting with index 0. Elements are referenced in the order they were added. Buttons are not included.
func (*Form) GetFormItemByLabel ¶

func (f *Form) GetFormItemByLabel(label string) FormItem

GetFormItemByLabel returns the first form element with the given label. If no such element is found, nil is returned. Buttons are not searched and will therefore not be returned.
func (*Form) GetFormItemCount ¶

func (f *Form) GetFormItemCount() int

GetFormItemCount returns the number of items in the form (not including the buttons).
func (*Form) GetFormItemIndex ¶

func (f *Form) GetFormItemIndex(label string) int

GetFormItemIndex returns the index of the first form element with the given label. If no such element is found, -1 is returned. Buttons are not searched and will therefore not be returned.
func (*Form) HasFocus ¶

func (f *Form) HasFocus() bool

HasFocus returns whether or not this primitive has focus.
func (*Form) InputHandler ¶

func (f *Form) InputHandler() func(event *tcell.EventKey, setFocus func(p Primitive))

InputHandler returns the handler for this primitive.
func (*Form) MouseHandler ¶

func (f *Form) MouseHandler() func(action MouseAction, event *tcell.EventMouse, setFocus func(p Primitive)) (consumed bool, capture Primitive)

MouseHandler returns the mouse handler for this primitive.
func (*Form) RemoveButton ¶

func (f *Form) RemoveButton(index int) *Form

RemoveButton removes the button at the specified position, starting with 0 for the button that was added first.
func (*Form) RemoveFormItem ¶

func (f *Form) RemoveFormItem(index int) *Form

RemoveFormItem removes the form element at the given position, starting with index 0. Elements are referenced in the order they were added. Buttons are not included.
func (*Form) SetButtonActivatedStyle ¶

func (f *Form) SetButtonActivatedStyle(style tcell.Style) *Form

SetButtonActivatedStyle sets the style of the buttons when they are focused.
func (*Form) SetButtonBackgroundColor ¶

func (f *Form) SetButtonBackgroundColor(color tcell.Color) *Form

SetButtonBackgroundColor sets the background color of the buttons. This is also the text color of the buttons when they are focused.
func (*Form) SetButtonDisabledStyle ¶

func (f *Form) SetButtonDisabledStyle(style tcell.Style) *Form

SetButtonDisabledStyle sets the style of the buttons when they are disabled.
func (*Form) SetButtonStyle ¶

func (f *Form) SetButtonStyle(style tcell.Style) *Form

SetButtonStyle sets the style of the buttons when they are not focused.
func (*Form) SetButtonTextColor ¶

func (f *Form) SetButtonTextColor(color tcell.Color) *Form

SetButtonTextColor sets the color of the button texts. This is also the background of the buttons when they are focused.
func (*Form) SetButtonsAlign ¶

func (f *Form) SetButtonsAlign(align int) *Form

SetButtonsAlign sets how the buttons align horizontally, one of AlignLeft (the default), AlignCenter, and AlignRight. This is only
func (*Form) SetCancelFunc ¶

func (f *Form) SetCancelFunc(callback func()) *Form

SetCancelFunc sets a handler which is called when the user hits the Escape key.
func (*Form) SetFieldBackgroundColor ¶

func (f *Form) SetFieldBackgroundColor(color tcell.Color) *Form

SetFieldBackgroundColor sets the background color of the input areas.
func (*Form) SetFieldTextColor ¶

func (f *Form) SetFieldTextColor(color tcell.Color) *Form

SetFieldTextColor sets the text color of the input areas.
func (*Form) SetFocus ¶

func (f *Form) SetFocus(index int) *Form

SetFocus shifts the focus to the form element with the given index, counting non-button items first and buttons last. Note that this index is only used when the form itself receives focus.
func (*Form) SetHorizontal ¶

func (f *Form) SetHorizontal(horizontal bool) *Form

SetHorizontal sets the direction the form elements are laid out. If set to true, instead of positioning them from top to bottom (the default), they are positioned from left to right, moving into the next row if there is not enough space.
func (*Form) SetItemPadding ¶

func (f *Form) SetItemPadding(padding int) *Form

SetItemPadding sets the number of empty rows between form items for vertical layouts and the number of empty cells between form items for horizontal layouts.
func (*Form) SetLabelColor ¶

func (f *Form) SetLabelColor(color tcell.Color) *Form

SetLabelColor sets the color of the labels.
type FormItem ¶

type FormItem interface {
	Primitive

	// GetLabel returns the item's label text.
	GetLabel() string

	// SetFormAttributes sets a number of item attributes at once.
	SetFormAttributes(labelWidth int, labelColor, bgColor, fieldTextColor, fieldBgColor tcell.Color) FormItem

	// GetFieldWidth returns the width of the form item's field (the area which
	// is manipulated by the user) in number of screen cells. A value of 0
	// indicates the the field width is flexible and may use as much space as
	// required.
	GetFieldWidth() int

	// GetFieldHeight returns the height of the form item's field (the area which
	// is manipulated by the user). This value must be greater than 0.
	GetFieldHeight() int

	// SetFinishedFunc sets the handler function for when the user finished
	// entering data into the item. The handler may receive events for the
	// Enter key (we're done), the Escape key (cancel input), the Tab key (move
	// to next field), the Backtab key (move to previous field), or a negative
	// value, indicating that the action for the last known key should be
	// repeated.
	SetFinishedFunc(handler func(key tcell.Key)) FormItem

	// SetDisabled sets whether or not the item is disabled / read-only. A form
	// must have at least one item that is not disabled.
	SetDisabled(disabled bool) FormItem
}

FormItem is the interface all form items must implement to be able to be included in a form.
type Frame ¶

type Frame struct {
	*Box
	// contains filtered or unexported fields
}

Frame is a wrapper which adds space around another primitive. In addition, the top area (header) and the bottom area (footer) may also contain text.

See https://github.com/rivo/tview/wiki/Frame for an example.
func NewFrame ¶

func NewFrame(primitive Primitive) *Frame

NewFrame returns a new frame around the given primitive. The primitive's size will be changed to fit within this frame. The primitive may be nil, in which case no other primitive is embedded in the frame.
func (*Frame) AddText ¶

func (f *Frame) AddText(text string, header bool, align int, color tcell.Color) *Frame

AddText adds text to the frame. Set "header" to true if the text is to appear in the header, above the contained primitive. Set it to false for it to appear in the footer, below the contained primitive. "align" must be one of the Align constants. Rows in the header are printed top to bottom, rows in the footer are printed bottom to top. Note that long text can overlap as different alignments will be placed on the same row.
func (*Frame) Clear ¶

func (f *Frame) Clear() *Frame

Clear removes all text from the frame.
func (*Frame) Draw ¶

func (f *Frame) Draw(screen tcell.Screen)

Draw draws this primitive onto the screen.
func (*Frame) Focus ¶

func (f *Frame) Focus(delegate func(p Primitive))

Focus is called when this primitive receives focus.
func (*Frame) GetPrimitive ¶

func (f *Frame) GetPrimitive() Primitive

GetPrimitive returns the primitive contained in this frame.
func (*Frame) HasFocus ¶

func (f *Frame) HasFocus() bool

HasFocus returns whether or not this primitive has focus.
func (*Frame) InputHandler ¶

func (f *Frame) InputHandler() func(event *tcell.EventKey, setFocus func(p Primitive))

InputHandler returns the handler for this primitive.
func (*Frame) MouseHandler ¶

func (f *Frame) MouseHandler() func(action MouseAction, event *tcell.EventMouse, setFocus func(p Primitive)) (consumed bool, capture Primitive)

MouseHandler returns the mouse handler for this primitive.
func (*Frame) SetBorders ¶

func (f *Frame) SetBorders(top, bottom, header, footer, left, right int) *Frame

SetBorders sets the width of the frame borders as well as "header" and "footer", the vertical space between the header and footer text and the contained primitive (does not apply if there is no text).
func (*Frame) SetPrimitive ¶

func (f *Frame) SetPrimitive(p Primitive) *Frame

SetPrimitive replaces the contained primitive with the given one. To remove a primitive, set it to nil.
type Grid ¶

type Grid struct {
	*Box
	// contains filtered or unexported fields
}

Grid is an implementation of a grid-based layout. It works by defining the size of the rows and columns, then placing primitives into the grid.

Some settings can lead to the grid exceeding its available space. SetOffset() can then be used to scroll in steps of rows and columns. These offset values can also be controlled with the arrow keys (or the "g","G", "j", "k", "h", and "l" keys) while the grid has focus and none of its contained primitives do.

See https://github.com/rivo/tview/wiki/Grid for an example.
func NewGrid ¶

func NewGrid() *Grid

NewGrid returns a new grid-based layout container with no initial primitives.

Note that Box, the superclass of Grid, will be transparent so that any grid areas not covered by any primitives will leave their background unchanged. To clear a Grid's background before any items are drawn, reset its Box to one with the desired color:

grid.Box = NewBox()

func (*Grid) AddItem ¶

func (g *Grid) AddItem(p Primitive, row, column, rowSpan, colSpan, minGridHeight, minGridWidth int, focus bool) *Grid

AddItem adds a primitive and its position to the grid. The top-left corner of the primitive will be located in the top-left corner of the grid cell at the given row and column and will span "rowSpan" rows and "colSpan" columns. For example, for a primitive to occupy rows 2, 3, and 4 and columns 5 and 6:

grid.AddItem(p, 2, 5, 3, 2, 0, 0, true)

If rowSpan or colSpan is 0, the primitive will not be drawn.

You can add the same primitive multiple times with different grid positions. The minGridWidth and minGridHeight values will then determine which of those positions will be used. This is similar to CSS media queries. These minimum values refer to the overall size of the grid. If multiple items for the same primitive apply, the one with the highest minimum value (width or height, whatever is higher) will be used, or the primitive added last if those values are the same. Example:

grid.AddItem(p, 0, 0, 0, 0, 0, 0, true). // Hide in small grids.
  AddItem(p, 0, 0, 1, 2, 100, 0, true).  // One-column layout for medium grids.
  AddItem(p, 1, 1, 3, 2, 300, 0, true)   // Multi-column layout for large grids.

To use the same grid layout for all sizes, simply set minGridWidth and minGridHeight to 0.

If the item's focus is set to true, it will receive focus when the grid receives focus. If there are multiple items with a true focus flag, the last visible one that was added will receive focus.
func (*Grid) Clear ¶

func (g *Grid) Clear() *Grid

Clear removes all items from the grid.
func (*Grid) Draw ¶

func (g *Grid) Draw(screen tcell.Screen)

Draw draws this primitive onto the screen.
func (*Grid) Focus ¶

func (g *Grid) Focus(delegate func(p Primitive))

Focus is called when this primitive receives focus.
func (*Grid) GetOffset ¶

func (g *Grid) GetOffset() (rows, columns int)

GetOffset returns the current row and column offset (see SetOffset() for details).
func (*Grid) HasFocus ¶

func (g *Grid) HasFocus() bool

HasFocus returns whether or not this primitive has focus.
func (*Grid) InputHandler ¶

func (g *Grid) InputHandler() func(event *tcell.EventKey, setFocus func(p Primitive))

InputHandler returns the handler for this primitive.
func (*Grid) MouseHandler ¶

func (g *Grid) MouseHandler() func(action MouseAction, event *tcell.EventMouse, setFocus func(p Primitive)) (consumed bool, capture Primitive)

MouseHandler returns the mouse handler for this primitive.
func (*Grid) RemoveItem ¶

func (g *Grid) RemoveItem(p Primitive) *Grid

RemoveItem removes all items for the given primitive from the grid, keeping the order of the remaining items intact.
func (*Grid) SetBorders ¶

func (g *Grid) SetBorders(borders bool) *Grid

SetBorders sets whether or not borders are drawn around grid items. Setting this value to true will cause the gap values (see SetGap()) to be ignored and automatically assumed to be 1 where the border graphics are drawn.
func (*Grid) SetBordersColor ¶

func (g *Grid) SetBordersColor(color tcell.Color) *Grid

SetBordersColor sets the color of the item borders.
func (*Grid) SetColumns ¶

func (g *Grid) SetColumns(columns ...int) *Grid

SetColumns defines how the columns of the grid are distributed. Each value defines the size of one column, starting with the leftmost column. Values greater than 0 represent absolute column widths (gaps not included). Values less than or equal to 0 represent proportional column widths or fractions of the remaining free space, where 0 is treated the same as -1. That is, a column with a value of -3 will have three times the width of a column with a value of -1 (or 0). The minimum width set with SetMinSize() is always observed.

Primitives may extend beyond the columns defined explicitly with this function. A value of 0 is assumed for any undefined column. In fact, if you never call this function, all columns occupied by primitives will have the same width. On the other hand, unoccupied columns defined with this function will always take their place.

Assuming a total width of the grid of 100 cells and a minimum width of 0, the following call will result in columns with widths of 30, 10, 15, 15, and 30 cells:

grid.SetColumns(30, 10, -1, -1, -2)

If a primitive were then placed in the 6th and 7th column, the resulting widths would be: 30, 10, 10, 10, 20, 10, and 10 cells.

If you then called SetMinSize() as follows:

grid.SetMinSize(15, 20)

The resulting widths would be: 30, 15, 15, 15, 20, 15, and 15 cells, a total of 125 cells, 25 cells wider than the available grid width.
func (*Grid) SetGap ¶

func (g *Grid) SetGap(row, column int) *Grid

SetGap sets the size of the gaps between neighboring primitives on the grid. If borders are drawn (see SetBorders()), these values are ignored and a gap of 1 is assumed. Panics if negative values are provided.
func (*Grid) SetMinSize ¶

func (g *Grid) SetMinSize(row, column int) *Grid

SetMinSize sets an absolute minimum width for rows and an absolute minimum height for columns. Panics if negative values are provided.
func (*Grid) SetOffset ¶

func (g *Grid) SetOffset(rows, columns int) *Grid

SetOffset sets the number of rows and columns which are skipped before drawing the first grid cell in the top-left corner. As the grid will never completely move off the screen, these values may be adjusted the next time the grid is drawn. The actual position of the grid may also be adjusted such that contained primitives that have focus remain visible.
func (*Grid) SetRows ¶

func (g *Grid) SetRows(rows ...int) *Grid

SetRows defines how the rows of the grid are distributed. These values behave the same as the column values provided with Grid.SetColumns, see there for a definition and examples.

The provided values correspond to row heights, the first value defining the height of the topmost row.
func (*Grid) SetSize ¶

func (g *Grid) SetSize(numRows, numColumns, rowSize, columnSize int) *Grid

SetSize is a shortcut for Grid.SetRows and Grid.SetColumns where all row and column values are set to the given size values. See Grid.SetColumns for details on sizes.
type Image ¶

type Image struct {
	*Box
	// contains filtered or unexported fields
}

Image implements a widget that displays one image. The original image (specified with Image.SetImage) is resized according to the specified size (see Image.SetSize), using the specified number of colors (see Image.SetColors), while applying dithering if necessary (see Image.SetDithering).

Images are approximated by graphical characters in the terminal. The resolution is therefore limited by the number and type of characters that can be drawn in the terminal and the colors available in the terminal. The quality of the final image also depends on the terminal's font and spacing settings, none of which are under the control of this package. Results may vary.
func NewImage ¶

func NewImage() *Image

NewImage returns a new image widget with an empty image (use Image.SetImage to specify the image to be displayed). The image will use the widget's entire available space. The dithering algorithm is set to Floyd-Steinberg dithering. The terminal's cell aspect ratio defaults to 0.5.
func (*Image) Draw ¶

func (i *Image) Draw(screen tcell.Screen)

Draw draws this primitive onto the screen.
func (*Image) Focus ¶

func (i *Image) Focus(delegate func(p Primitive))

Focus is called when this primitive receives focus.
func (*Image) GetColors ¶

func (i *Image) GetColors() int

GetColors returns the number of colors that will be used while drawing the image. This is one of the values listed in Image.SetColors, except 0 which will be replaced by the actual number of colors used.
func (*Image) GetFieldHeight ¶

func (i *Image) GetFieldHeight() int

GetFieldHeight returns this primitive's field height. This is the image's height or 8 if the height is 0 or less.
func (*Image) GetFieldWidth ¶

func (i *Image) GetFieldWidth() int

GetFieldWidth returns this primitive's field width. This is the image's width or, if the width is 0 or less, the proportional width of the image based on its height as returned by Image.GetFieldHeight. If there is no image, 0 is returned.
func (*Image) GetLabel ¶

func (i *Image) GetLabel() string

GetLabel returns the text to be displayed before the image.
func (*Image) GetLabelStyle ¶

func (i *Image) GetLabelStyle() tcell.Style

GetLabelStyle returns the style of the label.
func (*Image) SetAlign ¶

func (i *Image) SetAlign(vertical, horizontal int) *Image

SetAlign sets the vertical and horizontal alignment of the image within the widget's space. The possible values are AlignTop, AlignCenter, and AlignBottom for vertical alignment and AlignLeft, AlignCenter, and AlignRight for horizontal alignment. The default is AlignCenter for both (or AlignTop and AlignLeft if the image is part of a Form).
func (*Image) SetAspectRatio ¶

func (i *Image) SetAspectRatio(aspectRatio float64) *Image

SetAspectRatio sets the width of a terminal's cell divided by its height. You may change the default of 0.5 if your terminal / font has a different aspect ratio. This is used to calculate the size of the image if the specified width or height is 0. The function will panic if the aspect ratio is 0 or less.
func (*Image) SetColors ¶

func (i *Image) SetColors(colors int) *Image

SetColors sets the number of colors to use. This should be the number of colors supported by the terminal. If 0, the number of colors is chosen based on the TERM environment variable (which may or may not be reliable).

Only the values 0, 2, 8, 256, and 16777216 (TrueColor) are supported. Other values will be rounded up to the next supported value, to a maximum of 16777216.

The effect of using more colors than supported by the terminal is undefined.
func (*Image) SetDisabled ¶

func (i *Image) SetDisabled(disabled bool) FormItem

SetDisabled sets whether or not the item is disabled / read-only.
func (*Image) SetDithering ¶

func (i *Image) SetDithering(dithering int) *Image

SetDithering sets the dithering algorithm to use, one of the constants starting with "Dithering", for example DitheringFloydSteinberg (the default). Dithering is not applied when rendering in true-color.
func (*Image) SetFinishedFunc ¶

func (i *Image) SetFinishedFunc(handler func(key tcell.Key)) FormItem

SetFinishedFunc sets a callback invoked when the user leaves this form item.
func (*Image) SetFormAttributes ¶

func (i *Image) SetFormAttributes(labelWidth int, labelColor, bgColor, fieldTextColor, fieldBgColor tcell.Color) FormItem

SetFormAttributes sets attributes shared by all form items.
func (*Image) SetImage ¶

func (i *Image) SetImage(image image.Image) *Image

SetImage sets the image to be displayed. If nil, the widget will be empty.
func (*Image) SetLabel ¶

func (i *Image) SetLabel(label string) *Image

SetLabel sets the text to be displayed before the image.
func (*Image) SetLabelStyle ¶

func (i *Image) SetLabelStyle(style tcell.Style) *Image

SetLabelStyle sets the style of the label.
func (*Image) SetLabelWidth ¶

func (i *Image) SetLabelWidth(width int) *Image

SetLabelWidth sets the screen width of the label. A value of 0 will cause the primitive to use the width of the label string.
func (*Image) SetSize ¶

func (i *Image) SetSize(rows, columns int) *Image

SetSize sets the size of the image. Positive values refer to cells in the terminal. Negative values refer to a percentage of the available space (e.g. -50 means 50%). A value of 0 means that the corresponding size is chosen automatically based on the other size while preserving the image's aspect ratio. If both are 0, the image uses as much space as possible while still preserving the aspect ratio.
type InputField ¶

type InputField struct {
	*Box
	// contains filtered or unexported fields
}

InputField is a one-line box into which the user can enter text. Use InputField.SetAcceptanceFunc to accept or reject input, InputField.SetChangedFunc to listen for changes, and InputField.SetMaskCharacter to hide input from onlookers (e.g. for password input).

The input field also has an optional autocomplete feature. It is initialized by the InputField.SetAutocompleteFunc function. For more control over the autocomplete drop-down's behavior, you can also set the InputField.SetAutocompletedFunc.

Navigation and editing is the same as for a TextArea, with the following exceptions:

    Tab, BackTab, Enter, Escape: Finish editing.

If autocomplete functionality is configured:

    Down arrow: Open the autocomplete drop-down.
    Tab, Enter: Select the current autocomplete entry.

See https://github.com/rivo/tview/wiki/InputField for an example.
func NewInputField ¶

func NewInputField() *InputField

NewInputField returns a new input field.
func (*InputField) Autocomplete ¶

func (i *InputField) Autocomplete() *InputField

Autocomplete invokes the autocomplete callback (if there is one, see InputField.SetAutocompleteFunc). If the length of the returned autocomplete entries slice is greater than 0, the input field will present the user with a corresponding drop-down list the next time the input field is drawn.

It is safe to call this function from any goroutine. Note that the input field is not redrawn automatically unless called from the main goroutine (e.g. in response to events).
func (*InputField) Blur ¶

func (i *InputField) Blur()

Blur is called when this primitive loses focus.
func (*InputField) Draw ¶

func (i *InputField) Draw(screen tcell.Screen)

Draw draws this primitive onto the screen.
func (*InputField) Focus ¶

func (i *InputField) Focus(delegate func(p Primitive))

Focus is called when this primitive receives focus.
func (*InputField) GetFieldHeight ¶

func (i *InputField) GetFieldHeight() int

GetFieldHeight returns this primitive's field height.
func (*InputField) GetFieldStyle ¶

func (i *InputField) GetFieldStyle() tcell.Style

GetFieldStyle returns the style of the input area (when no placeholder is shown).
func (*InputField) GetFieldWidth ¶

func (i *InputField) GetFieldWidth() int

GetFieldWidth returns this primitive's field width.
func (*InputField) GetLabel ¶

func (i *InputField) GetLabel() string

GetLabel returns the text to be displayed before the input area.
func (*InputField) GetLabelStyle ¶

func (i *InputField) GetLabelStyle() tcell.Style

GetLabelStyle returns the style of the label.
func (*InputField) GetPlaceholderStyle ¶

func (i *InputField) GetPlaceholderStyle() tcell.Style

GetPlaceholderStyle returns the style of the input area (when a placeholder is shown).
func (*InputField) GetText ¶

func (i *InputField) GetText() string

GetText returns the current text of the input field.
func (*InputField) HasFocus ¶

func (i *InputField) HasFocus() bool

HasFocus returns whether or not this primitive has focus.
func (*InputField) InputHandler ¶

func (i *InputField) InputHandler() func(event *tcell.EventKey, setFocus func(p Primitive))

InputHandler returns the handler for this primitive.
func (*InputField) MouseHandler ¶

func (i *InputField) MouseHandler() func(action MouseAction, event *tcell.EventMouse, setFocus func(p Primitive)) (consumed bool, capture Primitive)

MouseHandler returns the mouse handler for this primitive.
func (*InputField) SetAcceptanceFunc ¶

func (i *InputField) SetAcceptanceFunc(handler func(textToCheck string, lastChar rune) bool) *InputField

SetAcceptanceFunc sets a handler which may reject the last character that was entered, by returning false. The handler receives the text as it would be after the change and the last character entered. If the handler is nil, all input is accepted. The function is only called when a single rune is inserted at the current cursor position.

This package defines a number of variables prefixed with InputField which may be used for common input (e.g. numbers, maximum text length). See for example InputFieldInteger.
